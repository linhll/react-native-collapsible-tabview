{"version":3,"sources":["CollapsibleTabView.tsx"],"names":["React","useRef","StyleSheet","Animated","View","TabView","TabBar","useDebouncedCallback","CollapsibleContextProvider","scrollScene","CollapsibleTabView","animatedValue","Value","navigationState","index","routes","renderHeader","containerHeight","collapsedHeight","tabBarHeight","appBarHeight","appBar","tabBarProps","headerContainerStyle","preventTabPressOnGliding","disableSnap","headerBackground","renderTabBar","customRenderTabBar","snapThreshold","snapTimeout","routeKeyProp","tabViewProps","scrollY","listRefArr","listOffset","isGliding","isUserInteracting","lastInteractionTime","canSnap","setCanSnap","useState","activateSnapDebounced","lastInteractedAgo","Date","now","current","callback","trailing","leading","translateY","interpolate","inputRange","Math","max","outputRange","extrapolateRight","useLayoutEffect","currY","addListener","value","curRoute","removeAllListeners","syncScrollOffsets","useCallback","curRouteKey","offset","newOffset","calculateNewOffset","forEach","item","isCurrentRoute","key","itemOffset","ref","animated","min","maybeSnap","onMomentumScrollBegin","onMomentumScrollEnd","onScrollBeginDrag","onScrollEndDrag","buildGetRef","routeKey","found","find","e","push","props","zIndex","position","width","height","transform","styles","headerContainer","top","event","preventDefault","onTabPress","onTouchStart","onTouchEnd","container","activeRouteKey","create","flex","overflow","headerHeight"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport { StyleSheet, Animated, ViewStyle, View } from 'react-native';\nimport {\n  TabView,\n  TabBar,\n  Route,\n  TabViewProps,\n  TabBarProps,\n  NavigationState,\n  SceneRendererProps,\n} from 'react-native-tab-view';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { CollapsibleContextProvider } from './CollapsibleTabViewContext';\nimport scrollScene from './scrollScene';\nimport type { ScrollRef, GetRef } from './types';\n\ntype PTabBarProps<T extends Route> = Partial<TabBarProps<T>>;\n\nexport type RenderTabBarProps<T extends Route, P extends object = {}> = {\n  navigationState: NavigationState<T>;\n  isGliding: React.MutableRefObject<boolean>;\n  preventTabPressOnGliding: boolean;\n} & SceneRendererProps &\n  P;\n\nexport type Props<\n  T extends Route,\n  P extends object = PTabBarProps<T>\n> = Partial<Omit<TabViewProps<T>, 'renderTabBar'>> &\n  Pick<TabViewProps<T>, 'onIndexChange' | 'navigationState' | 'renderScene'> & {\n    /**\n     * Optionally controlled animated value.\n     * Default is `new Animated.Value(0)`.\n     */\n    animatedValue?: Animated.Value;\n    /**\n     * Container height\n     */\n    containerHeight?: number;\n    /**\n     * Collapsed header height, default is 0.\n     */\n    collapsedHeight: number;\n    /**\n     * Tab bar height, default is 48.\n     */\n    tabBarHeight?: number;\n    /**\n     * Props passed to the tab bar component.\n     */\n    tabBarProps?: P;\n    /**\n     * App bar component\n     */\n    appBar?: React.ReactNode | null;\n    /**\n     * App bar height\n     */\n    appBarHeight?: number;\n    /**\n     * Header rendered on top of the tab bar. Default is `() => null`\n     */\n    renderHeader?: () => React.ReactNode;\n    /**\n     * Styles applied to header and tabbar container.\n     */\n    headerContainerStyle?: Animated.WithAnimatedValue<ViewStyle>;\n    /**\n     * Prevent tab press if screen is gliding. Default is `true`\n     */\n    preventTabPressOnGliding?: boolean;\n    /**\n     * Disable the snap animation.\n     */\n    disableSnap?: boolean;\n    /**\n     * Same as `renderTab` of `TabViewProps`, but with the additional\n     * `isGliding` and `preventTabPressOnGliding` properties.\n     */\n    renderTabBar?: (props: RenderTabBarProps<T, P>) => React.ReactNode;\n    /**\n     * Custom header background element.\n     */\n    headerBackground?: React.ReactNode | null;\n    /**\n     * Callback fired when the `headerHeight` state value inside\n     * `CollapsibleTabView` will be updated in the `onLayout` event\n     * from the tab/header container. Useful to call layout animations\n     * Example:\n     *\n     * ```js\n     * const onHeaderHeightChange = () => {\n     *  LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut)\n     * }\n     * ```\n     */\n    onHeaderHeightChange?: () => void;\n    /**\n     * Percentage of header height to make the snap effect. A number between\n     * 0 and 1. Default is 0.5.\n     */\n    snapThreshold?: number;\n    /**\n     * How long to wait before initiating the snap effect, in milliseconds.\n     * Default is 100\n     */\n    snapTimeout?: number;\n    /**\n     * The property from the `routes` map to use for the active route key\n     * Default is 'key'\n     */\n    routeKeyProp?: keyof T;\n  };\n\n/**\n * `CollapsibleTabView` wraps the `TabView` and take care of animations /\n * scroll value computations. It should be used with `useCollapsibleScene`.\n */\nconst CollapsibleTabView = <\n  T extends Route,\n  P extends object = PTabBarProps<T>\n>({\n  animatedValue = new Animated.Value(0),\n  navigationState: { index, routes },\n  renderHeader = () => null,\n  containerHeight = 48,\n  collapsedHeight = 0,\n  tabBarHeight = 48,\n  appBarHeight = 0,\n  appBar,\n  tabBarProps,\n  headerContainerStyle,\n  preventTabPressOnGliding = true,\n  disableSnap = false,\n  headerBackground,\n  renderTabBar: customRenderTabBar,\n  snapThreshold = 0.5,\n  snapTimeout = 250,\n  routeKeyProp = 'key',\n  ...tabViewProps\n}: React.PropsWithoutRef<Props<T, P>>): React.ReactElement => {\n  const scrollY = React.useRef(animatedValue);\n  const listRefArr = React.useRef<{ key: T['key']; value?: ScrollRef }[]>([]);\n  const listOffset = React.useRef<{ [key: string]: number }>({});\n  const isGliding = React.useRef(false);\n  /** Used to keep track if the user is actively scrolling */\n  const isUserInteracting = React.useRef(false);\n  const lastInteractionTime = React.useRef(0);\n\n  const [canSnap, setCanSnap] = React.useState(false);\n\n  const activateSnapDebounced = useDebouncedCallback(\n    () => {\n      const lastInteractedAgo = Date.now() - lastInteractionTime.current;\n      // make sure the user is not currently still scrolling\n      if (!isUserInteracting.current && lastInteractedAgo > snapTimeout) {\n        setCanSnap(true);\n      } else {\n        // re-enter until we have no interactions in the past `snapTimeout`\n        activateSnapDebounced.callback();\n      }\n    },\n    16, // check about once per frame\n    { trailing: true, leading: false }\n  );\n\n  const translateY = useRef(\n    scrollY.current.interpolate({\n      inputRange: [0, Math.max(collapsedHeight, tabBarHeight)], // Always allow for a minimum of `tabBarHeight`\n      outputRange: [0, -collapsedHeight],\n      extrapolateRight: 'clamp',\n    })\n  ).current;\n\n  React.useLayoutEffect(() => {\n    const currY = scrollY.current;\n    currY.addListener(({ value }) => {\n      const curRoute = routes[index][routeKeyProp as keyof Route] as string;\n      listOffset.current[curRoute] = value;\n      lastInteractionTime.current = Date.now();\n    });\n    return () => {\n      currY.removeAllListeners();\n    };\n  }, [routes, index, routeKeyProp, activateSnapDebounced]);\n\n  /**\n   * Sync the scroll of unfocused routes to the current focused route.\n   */\n  const syncScrollOffsets = React.useCallback(() => {\n    const curRouteKey = routes[index][routeKeyProp as keyof Route] as string;\n    const offset = listOffset.current[curRouteKey];\n\n    const newOffset = calculateNewOffset(\n      offset,\n      collapsedHeight,\n      disableSnap,\n      snapThreshold\n    );\n\n    listRefArr.current.forEach((item) => {\n      const isCurrentRoute = item.key === curRouteKey;\n      if (isCurrentRoute) return;\n\n      const itemOffset = listOffset.current[item.key];\n      if (newOffset !== null) {\n        scrollScene({\n          ref: item.value,\n          offset,\n          animated: false,\n        });\n        listOffset.current[item.key] = offset;\n      } else if (itemOffset < collapsedHeight || !itemOffset) {\n        scrollScene({\n          ref: item.value,\n          offset: Math.min(offset, collapsedHeight),\n          animated: false,\n        });\n      }\n    });\n  }, [\n    disableSnap,\n    collapsedHeight,\n    index,\n    routeKeyProp,\n    routes,\n    snapThreshold,\n  ]);\n\n  /**\n   * Snapping\n   */\n  React.useLayoutEffect(() => {\n    if (disableSnap || !canSnap) return;\n\n    const curRouteKey = routes[index][routeKeyProp as keyof Route] as string;\n    const offset = listOffset.current[curRouteKey];\n\n    setCanSnap(false);\n\n    const newOffset = calculateNewOffset(\n      offset,\n      collapsedHeight,\n      disableSnap,\n      snapThreshold\n    );\n\n    if (newOffset !== null && newOffset !== offset) {\n      listRefArr.current.forEach((item) => {\n        // scroll everything because we could be moving to a new tab\n        scrollScene({\n          ref: item.value,\n          offset: newOffset,\n          animated: true,\n        });\n      });\n    }\n  }, [\n    canSnap,\n    disableSnap,\n    collapsedHeight,\n    index,\n    routeKeyProp,\n    routes,\n    snapThreshold,\n  ]);\n\n  const maybeSnap = React.useCallback(() => {\n    const curRouteKey = routes[index][routeKeyProp as keyof Route] as string;\n\n    const offset = listOffset.current[curRouteKey];\n\n    const newOffset = calculateNewOffset(\n      offset,\n      collapsedHeight,\n      disableSnap,\n      snapThreshold\n    );\n\n    // only snap if the current offset is different\n    if (newOffset !== null && offset !== newOffset) {\n      lastInteractionTime.current = Date.now();\n      activateSnapDebounced.callback();\n    }\n  }, [\n    activateSnapDebounced,\n    disableSnap,\n    collapsedHeight,\n    index,\n    routeKeyProp,\n    routes,\n    snapThreshold,\n  ]);\n\n  const onMomentumScrollBegin = () => {\n    isGliding.current = true;\n  };\n\n  const onMomentumScrollEnd = () => {\n    isGliding.current = false;\n    maybeSnap();\n    syncScrollOffsets();\n  };\n\n  const onScrollBeginDrag = () => {\n    isUserInteracting.current = true;\n    lastInteractionTime.current = Date.now();\n  };\n\n  const onScrollEndDrag = () => {\n    isUserInteracting.current = false;\n    lastInteractionTime.current = Date.now();\n    // make sure we snap if the user keeps his finger in the same position for a while then lifts it\n    maybeSnap();\n    syncScrollOffsets();\n  };\n\n  /**\n   * Function to be passed as ref for the scrollable animated\n   * component inside the tab scene.\n   *\n   * One of: Animated.[SrcollView | FlatList]\n   *\n   * It is exposed in the context.\n   */\n  const buildGetRef = React.useCallback(\n    (routeKey: string): GetRef => (ref) => {\n      if (ref) {\n        const found = listRefArr.current.find((e) => e.key === routeKey);\n        if (!found) {\n          listRefArr.current.push({\n            key: routeKey,\n            value: ref,\n          });\n        }\n      }\n    },\n    []\n  );\n\n  /**\n   *\n   * Wraps the tab bar with `Animated.View` to\n   * control the translateY property.\n   *\n   * Render the header with `renderHeader` prop.\n   *\n   * Render the default `<TabBar />` with additional\n   * `tabBarProps`, or a custom tab bar from the\n   * `renderTabBar` prop, inside the Animated wrapper.\n   */\n  const renderTabBar = (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ): React.ReactNode => {\n    return (\n      <View style={{ zIndex: 1000 }}>\n        {!!headerBackground && (\n          <Animated.View\n            style={{\n              position: 'absolute',\n              width: '100%',\n              height: appBarHeight + tabBarHeight + collapsedHeight,\n              transform: [{ translateY }],\n            }}\n          >\n            {headerBackground}\n          </Animated.View>\n        )}\n\n        {!!appBar && (\n          <View style={{ zIndex: 1000, height: appBarHeight }}>{appBar}</View>\n        )}\n        <Animated.View\n          pointerEvents=\"box-none\"\n          style={[\n            styles.headerContainer,\n            {\n              top: appBarHeight,\n              height: collapsedHeight + tabBarHeight,\n              transform: [{ translateY }],\n            },\n            headerContainerStyle,\n          ]}\n        >\n          {renderHeader()}\n          {customRenderTabBar ? (\n            // @ts-ignore\n            customRenderTabBar({\n              ...props,\n              ...tabBarProps,\n              isGliding,\n              preventTabPressOnGliding,\n            })\n          ) : (\n            <TabBar\n              {...props}\n              {...tabBarProps}\n              onTabPress={(event) => {\n                if (isGliding.current && preventTabPressOnGliding) {\n                  event.preventDefault();\n                }\n                // @ts-ignore\n                tabBarProps?.onTabPress && tabBarProps.onTabPress(event);\n              }}\n            />\n          )}\n        </Animated.View>\n      </View>\n    );\n  };\n\n  const onTouchStart = React.useCallback(() => {\n    lastInteractionTime.current = Date.now();\n    isUserInteracting.current = true;\n  }, []);\n\n  const onTouchEnd = React.useCallback(() => {\n    lastInteractionTime.current = Date.now();\n    isUserInteracting.current = false;\n  }, []);\n\n  return (\n    <View\n      style={styles.container}\n      onTouchStart={onTouchStart}\n      onTouchCancel={onTouchEnd}\n      onTouchEnd={onTouchEnd}\n    >\n      <CollapsibleContextProvider\n        value={{\n          activeRouteKey: routes[index][routeKeyProp as keyof Route] as string,\n          scrollY: scrollY.current,\n          buildGetRef,\n          collapsedHeight,\n          tabBarHeight,\n          appBarHeight,\n          onMomentumScrollBegin,\n          onScrollBeginDrag,\n          onScrollEndDrag,\n          onMomentumScrollEnd,\n          containerHeight: containerHeight || 0,\n        }}\n      >\n        <TabView\n          {...tabViewProps}\n          navigationState={{ index, routes }}\n          renderTabBar={renderTabBar}\n        />\n      </CollapsibleContextProvider>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  headerContainer: {\n    top: 0,\n    zIndex: 1,\n    position: 'absolute',\n    width: '100%',\n  },\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n\nexport default CollapsibleTabView;\n\nfunction calculateNewOffset(\n  offset: number,\n  headerHeight: number,\n  disableSnap: boolean,\n  snapThreshold: number\n) {\n  return offset >= 0 && offset <= headerHeight\n    ? disableSnap\n      ? offset\n      : offset <= headerHeight * snapThreshold\n      ? 0\n      : offset > headerHeight * snapThreshold\n      ? headerHeight\n      : null\n    : null;\n}\n"]}