{"version":3,"sources":["MaterialTopTabsCollapsibleTabView.tsx"],"names":["React","NavigationHelpersContext","TabActions","useTheme","CollapsibleTabView","MaterialTopTabBar","MaterialTopTabsCollapsibleTabView","pager","lazyPlaceholder","tabBar","props","tabBarOptions","state","navigation","descriptors","sceneContainerStyle","collapsibleOptions","rest","colors","renderTabBar","index","dispatch","jumpTo","routes","name","target","key","route","render","emit","type","backgroundColor","background"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SACEC,wBADF,EAEEC,UAFF,EAGEC,QAHF,QAIO,0BAJP;AAMA,OAAOC,kBAAP,MAEO,sBAFP;AAGA,SAEEC,iBAFF,QAIO,qCAJP;AAYA,eAAe,SAASC,iCAAT,CAA2C;AACxDC,EAAAA,KADwD;AAExDC,EAAAA,eAFwD;AAGxDC,EAAAA,MAAM,GAAIC,KAAD,iBAAmC,oBAAC,iBAAD,EAAuBA,KAAvB,CAHY;AAIxDC,EAAAA,aAJwD;AAKxDC,EAAAA,KALwD;AAMxDC,EAAAA,UANwD;AAOxDC,EAAAA,WAPwD;AAQxDC,EAAAA,mBARwD;AASxDC,EAAAA,kBATwD;AAUxD,KAAGC;AAVqD,CAA3C,EAW4B;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAaf,QAAQ,EAA3B;;AAEA,QAAMgB,YAAY,GAAIT,KAAD,IAA+B;AAClD,WAAOD,MAAM,CAAC,EACZ,GAAGE,aADS;AAEZ,SAAGD,KAFS;AAGZE,MAAAA,KAAK,EAAEA,KAHK;AAIZC,MAAAA,UAAU,EAAEA,UAJA;AAKZC,MAAAA,WAAW,EAAEA;AALD,KAAD,CAAb;AAOD,GARD;;AAUA,sBACE,oBAAC,wBAAD,CAA0B,QAA1B;AAAmC,IAAA,KAAK,EAAED;AAA1C,kBACE,oBAAC,kBAAD,eACMG,kBADN,EAEMC,IAFN;AAGE,IAAA,YAAY,EAAC,MAHf;AAIE,IAAA,aAAa,EAAGG,KAAD,IACbP,UAAU,CAACQ,QAAX,CAAoB,EAClB,GAAGnB,UAAU,CAACoB,MAAX,CAAkBV,KAAK,CAACW,MAAN,CAAaH,KAAb,EAAoBI,IAAtC,CADe;AAElBC,MAAAA,MAAM,EAAEb,KAAK,CAACc;AAFI,KAApB,CALJ;AAUE,IAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAeb,WAAW,CAACa,KAAK,CAACD,GAAP,CAAX,CAAuBE,MAAvB,EAV9B;AAWE,IAAA,eAAe,EAAEhB,KAXnB;AAYE,IAAA,YAAY,EAAEO,YAZhB;AAaE,IAAA,WAAW,EAAEZ,KAbf;AAcE,IAAA,qBAAqB,EAAEC,eAdzB;AAeE,IAAA,YAAY,EAAE,MAAMK,UAAU,CAACgB,IAAX,CAAgB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAftB;AAgBE,IAAA,UAAU,EAAE,MAAMjB,UAAU,CAACgB,IAAX,CAAgB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAhBpB;AAiBE,IAAA,mBAAmB,EAAE,CACnB;AAAEC,MAAAA,eAAe,EAAEb,MAAM,CAACc;AAA1B,KADmB,EAEnBjB,mBAFmB;AAjBvB,KADF,CADF;AA0BD","sourcesContent":["import * as React from 'react';\nimport { SceneRendererProps } from 'react-native-tab-view';\nimport {\n  NavigationHelpersContext,\n  TabActions,\n  useTheme,\n} from '@react-navigation/native';\n\nimport CollapsibleTabView, {\n  Props as CollapsibleTabViewProps,\n} from './CollapsibleTabView';\nimport {\n  MaterialTopTabBarProps,\n  MaterialTopTabBar,\n  MaterialTopTabView,\n} from '@react-navigation/material-top-tabs';\n\nexport type MaterialTopTabsCollapsibleTabViewProps = Parameters<\n  typeof MaterialTopTabView\n>[0] & {\n  collapsibleOptions?: Partial<CollapsibleTabViewProps<any>>;\n};\n\nexport default function MaterialTopTabsCollapsibleTabView({\n  pager,\n  lazyPlaceholder,\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  tabBarOptions,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  collapsibleOptions,\n  ...rest\n}: MaterialTopTabsCollapsibleTabViewProps) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...tabBarOptions,\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <CollapsibleTabView\n        {...collapsibleOptions}\n        {...rest}\n        routeKeyProp=\"name\"\n        onIndexChange={(index) =>\n          navigation.dispatch({\n            ...TabActions.jumpTo(state.routes[index].name),\n            target: state.key,\n          })\n        }\n        renderScene={({ route }) => descriptors[route.key].render()}\n        navigationState={state}\n        renderTabBar={renderTabBar}\n        renderPager={pager}\n        renderLazyPlaceholder={lazyPlaceholder}\n        onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n        onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n        sceneContainerStyle={[\n          { backgroundColor: colors.background },\n          sceneContainerStyle,\n        ]}\n      />\n    </NavigationHelpersContext.Provider>\n  );\n}\n"]}