{"version":3,"sources":["CollapsibleTabView.tsx"],"names":["CollapsibleTabView","animatedValue","Animated","Value","navigationState","index","routes","renderHeader","headerHeight","initialHeaderHeight","tabBarHeight","appBar","tabBarProps","headerContainerStyle","preventTabPressOnGliding","disableSnap","headerBackground","renderTabBar","customRenderTabBar","onHeaderHeightChange","snapThreshold","snapTimeout","routeKeyProp","tabViewProps","setHeaderHeight","React","useState","Math","max","appBarHeight","setAppBarHeight","scrollY","useRef","listRefArr","listOffset","isGliding","isUserInteracting","lastInteractionTime","canSnap","setCanSnap","activateSnapDebounced","lastInteractedAgo","Date","now","current","callback","trailing","leading","translateY","setTranslateY","interpolate","inputRange","outputRange","extrapolate","useLayoutEffect","currY","addListener","value","curRoute","removeAllListeners","syncScrollOffsets","useCallback","curRouteKey","offset","newOffset","calculateNewOffset","forEach","item","isCurrentRoute","key","itemOffset","ref","animated","min","maybeSnap","onMomentumScrollBegin","onMomentumScrollEnd","onScrollBeginDrag","onScrollEndDrag","buildGetRef","routeKey","found","find","e","push","getHeaderHeight","event","nativeEvent","layout","height","extrapolateRight","props","zIndex","position","width","transform","styles","headerContainer","top","preventDefault","onTabPress","containerHeight","setContainerHeight","undefined","onLayout","onTouchStart","onTouchEnd","container","activeRouteKey","StyleSheet","create","flex","overflow"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  StyleSheet,\n  Animated,\n  ViewStyle,\n  LayoutChangeEvent,\n  View,\n} from 'react-native';\nimport {\n  TabView,\n  TabBar,\n  Route,\n  TabViewProps,\n  TabBarProps,\n  NavigationState,\n  SceneRendererProps,\n} from 'react-native-tab-view';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { CollapsibleContextProvider } from './CollapsibleTabViewContext';\nimport scrollScene from './scrollScene';\nimport type { ScrollRef, GetRef } from './types';\n\ntype PTabBarProps<T extends Route> = Partial<TabBarProps<T>>;\n\nexport type RenderTabBarProps<T extends Route, P extends object = {}> = {\n  navigationState: NavigationState<T>;\n  isGliding: React.MutableRefObject<boolean>;\n  preventTabPressOnGliding: boolean;\n} & SceneRendererProps &\n  P;\n\nexport type Props<\n  T extends Route,\n  P extends object = PTabBarProps<T>\n> = Partial<Omit<TabViewProps<T>, 'renderTabBar'>> &\n  Pick<TabViewProps<T>, 'onIndexChange' | 'navigationState' | 'renderScene'> & {\n    /**\n     * Optionally controlled animated value.\n     * Default is `new Animated.Value(0)`.\n     */\n    animatedValue?: Animated.Value;\n    /**\n     * Header height, default is 0.\n     */\n    headerHeight?: number;\n    /**\n     * Tab bar height, default is 48.\n     */\n    tabBarHeight?: number;\n    /**\n     * Props passed to the tab bar component.\n     */\n    tabBarProps?: P;\n    appBar?: React.ReactNode | null;\n    /**\n     * Header rendered on top of the tab bar. Default is `() => null`\n     */\n    renderHeader?: () => React.ReactNode;\n    /**\n     * Styles applied to header and tabbar container.\n     */\n    headerContainerStyle?: Animated.WithAnimatedValue<ViewStyle>;\n    /**\n     * Prevent tab press if screen is gliding. Default is `true`\n     */\n    preventTabPressOnGliding?: boolean;\n    /**\n     * Disable the snap animation.\n     */\n    disableSnap?: boolean;\n    /**\n     * Same as `renderTab` of `TabViewProps`, but with the additional\n     * `isGliding` and `preventTabPressOnGliding` properties.\n     */\n    renderTabBar?: (props: RenderTabBarProps<T, P>) => React.ReactNode;\n    /**\n     * Custom header background element.\n     */\n    headerBackground?: React.ReactNode | null;\n    /**\n     * Callback fired when the `headerHeight` state value inside\n     * `CollapsibleTabView` will be updated in the `onLayout` event\n     * from the tab/header container. Useful to call layout animations\n     * Example:\n     *\n     * ```js\n     * const onHeaderHeightChange = () => {\n     *  LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut)\n     * }\n     * ```\n     */\n    onHeaderHeightChange?: () => void;\n    /**\n     * Percentage of header height to make the snap effect. A number between\n     * 0 and 1. Default is 0.5.\n     */\n    snapThreshold?: number;\n    /**\n     * How long to wait before initiating the snap effect, in milliseconds.\n     * Default is 100\n     */\n    snapTimeout?: number;\n    /**\n     * The property from the `routes` map to use for the active route key\n     * Default is 'key'\n     */\n    routeKeyProp?: keyof T;\n  };\n\n/**\n * `CollapsibleTabView` wraps the `TabView` and take care of animations /\n * scroll value computations. It should be used with `useCollapsibleScene`.\n */\nconst CollapsibleTabView = <\n  T extends Route,\n  P extends object = PTabBarProps<T>\n>({\n  animatedValue = new Animated.Value(0),\n  navigationState: { index, routes },\n  renderHeader = () => null,\n  headerHeight: initialHeaderHeight = 0,\n  tabBarHeight = 48,\n  appBar,\n  tabBarProps,\n  headerContainerStyle,\n  preventTabPressOnGliding = true,\n  disableSnap = false,\n  headerBackground,\n  renderTabBar: customRenderTabBar,\n  onHeaderHeightChange,\n  snapThreshold = 0.5,\n  snapTimeout = 250,\n  routeKeyProp = 'key',\n  ...tabViewProps\n}: React.PropsWithoutRef<Props<T, P>>): React.ReactElement => {\n  const [headerHeight, setHeaderHeight] = React.useState(\n    Math.max(initialHeaderHeight, 0)\n  );\n  const [appBarHeight, setAppBarHeight] = React.useState(0);\n\n  const scrollY = React.useRef(animatedValue);\n  const listRefArr = React.useRef<{ key: T['key']; value?: ScrollRef }[]>([]);\n  const listOffset = React.useRef<{ [key: string]: number }>({});\n  const isGliding = React.useRef(false);\n  /** Used to keep track if the user is actively scrolling */\n  const isUserInteracting = React.useRef(false);\n  const lastInteractionTime = React.useRef(0);\n\n  const [canSnap, setCanSnap] = React.useState(false);\n\n  const activateSnapDebounced = useDebouncedCallback(\n    () => {\n      const lastInteractedAgo = Date.now() - lastInteractionTime.current;\n      // make sure the user is not currently still scrolling\n      if (!isUserInteracting.current && lastInteractedAgo > snapTimeout) {\n        setCanSnap(true);\n      } else {\n        // re-enter until we have no interactions in the past `snapTimeout`\n        activateSnapDebounced.callback();\n      }\n    },\n    16, // check about once per frame\n    { trailing: true, leading: false }\n  );\n\n  const [translateY, setTranslateY] = React.useState(\n    scrollY.current.interpolate({\n      inputRange: [0, Math.max(headerHeight, 0)],\n      outputRange: [0, -headerHeight],\n      extrapolate: 'clamp',\n    })\n  );\n\n  React.useLayoutEffect(() => {\n    const currY = scrollY.current;\n    currY.addListener(({ value }) => {\n      const curRoute = routes[index][routeKeyProp as keyof Route] as string;\n      listOffset.current[curRoute] = value;\n      lastInteractionTime.current = Date.now();\n    });\n    return () => {\n      currY.removeAllListeners();\n    };\n  }, [routes, index, routeKeyProp, activateSnapDebounced]);\n\n  /**\n   * Sync the scroll of unfocused routes to the current focused route.\n   */\n  const syncScrollOffsets = React.useCallback(() => {\n    const curRouteKey = routes[index][routeKeyProp as keyof Route] as string;\n    const offset = listOffset.current[curRouteKey];\n\n    const newOffset = calculateNewOffset(\n      offset,\n      headerHeight,\n      disableSnap,\n      snapThreshold\n    );\n\n    listRefArr.current.forEach((item) => {\n      const isCurrentRoute = item.key === curRouteKey;\n      if (isCurrentRoute) return;\n\n      const itemOffset = listOffset.current[item.key];\n      if (newOffset !== null) {\n        scrollScene({\n          ref: item.value,\n          offset,\n          animated: false,\n        });\n        listOffset.current[item.key] = offset;\n      } else if (itemOffset < headerHeight || !itemOffset) {\n        scrollScene({\n          ref: item.value,\n          offset: Math.min(offset, headerHeight),\n          animated: false,\n        });\n      }\n    });\n  }, [disableSnap, headerHeight, index, routeKeyProp, routes, snapThreshold]);\n\n  /**\n   * Snapping\n   */\n  React.useLayoutEffect(() => {\n    if (disableSnap || !canSnap) return;\n\n    const curRouteKey = routes[index][routeKeyProp as keyof Route] as string;\n    const offset = listOffset.current[curRouteKey];\n\n    setCanSnap(false);\n\n    const newOffset = calculateNewOffset(\n      offset,\n      headerHeight,\n      disableSnap,\n      snapThreshold\n    );\n\n    if (newOffset !== null && newOffset !== offset) {\n      listRefArr.current.forEach((item) => {\n        // scroll everything because we could be moving to a new tab\n        scrollScene({\n          ref: item.value,\n          offset: newOffset,\n          animated: true,\n        });\n      });\n    }\n  }, [\n    canSnap,\n    disableSnap,\n    headerHeight,\n    index,\n    routeKeyProp,\n    routes,\n    snapThreshold,\n  ]);\n\n  const maybeSnap = React.useCallback(() => {\n    const curRouteKey = routes[index][routeKeyProp as keyof Route] as string;\n\n    const offset = listOffset.current[curRouteKey];\n\n    const newOffset = calculateNewOffset(\n      offset,\n      headerHeight,\n      disableSnap,\n      snapThreshold\n    );\n\n    // only snap if the current offset is different\n    if (newOffset !== null && offset !== newOffset) {\n      lastInteractionTime.current = Date.now();\n      activateSnapDebounced.callback();\n    }\n  }, [\n    activateSnapDebounced,\n    disableSnap,\n    headerHeight,\n    index,\n    routeKeyProp,\n    routes,\n    snapThreshold,\n  ]);\n\n  const onMomentumScrollBegin = () => {\n    isGliding.current = true;\n  };\n\n  const onMomentumScrollEnd = () => {\n    isGliding.current = false;\n    maybeSnap();\n    syncScrollOffsets();\n  };\n\n  const onScrollBeginDrag = () => {\n    isUserInteracting.current = true;\n    lastInteractionTime.current = Date.now();\n  };\n\n  const onScrollEndDrag = () => {\n    isUserInteracting.current = false;\n    lastInteractionTime.current = Date.now();\n    // make sure we snap if the user keeps his finger in the same position for a while then lifts it\n    maybeSnap();\n    syncScrollOffsets();\n  };\n\n  /**\n   * Function to be passed as ref for the scrollable animated\n   * component inside the tab scene.\n   *\n   * One of: Animated.[SrcollView | FlatList]\n   *\n   * It is exposed in the context.\n   */\n  const buildGetRef = React.useCallback(\n    (routeKey: string): GetRef => (ref) => {\n      if (ref) {\n        const found = listRefArr.current.find((e) => e.key === routeKey);\n        if (!found) {\n          listRefArr.current.push({\n            key: routeKey,\n            value: ref,\n          });\n        }\n      }\n    },\n    []\n  );\n\n  /**\n   * Get header height on layout mount/change,\n   * if different from the current `headerHeight`,\n   * update both the `headerHeight` and the\n   * `translateY`.\n   */\n  const getHeaderHeight = React.useCallback(\n    (event: LayoutChangeEvent) => {\n      const value = event.nativeEvent.layout.height - tabBarHeight;\n      onHeaderHeightChange?.();\n      setHeaderHeight(Math.max(value, 0));\n      setTranslateY(\n        scrollY.current.interpolate({\n          inputRange: [0, Math.max(value, tabBarHeight)], // Always allow for a minimum of `tabBarHeight`\n          outputRange: [0, -value],\n          extrapolateRight: 'clamp',\n        })\n      );\n    },\n    [onHeaderHeightChange, scrollY, tabBarHeight]\n  );\n\n  /**\n   *\n   * Wraps the tab bar with `Animated.View` to\n   * control the translateY property.\n   *\n   * Render the header with `renderHeader` prop.\n   *\n   * Render the default `<TabBar />` with additional\n   * `tabBarProps`, or a custom tab bar from the\n   * `renderTabBar` prop, inside the Animated wrapper.\n   */\n  const renderTabBar = (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ): React.ReactNode => {\n    return (\n      <View style={{ zIndex: 1000 }}>\n        {!!headerBackground && (\n          <Animated.View\n            style={{\n              position: 'absolute',\n              width: '100%',\n              height: appBarHeight + tabBarHeight + headerHeight,\n              transform: [{ translateY }],\n            }}\n          >\n            {headerBackground}\n          </Animated.View>\n        )}\n\n        {!!appBar && (\n          <View\n            onLayout={(e) => setAppBarHeight(e.nativeEvent.layout.height)}\n            style={{ zIndex: 1000 }}\n          >\n            {appBar}\n          </View>\n        )}\n        <Animated.View\n          pointerEvents=\"box-none\"\n          style={[\n            styles.headerContainer,\n            {\n              top: appBarHeight,\n              transform: [{ translateY }],\n            },\n            headerContainerStyle,\n          ]}\n          onLayout={getHeaderHeight}\n        >\n          {renderHeader()}\n          {customRenderTabBar ? (\n            // @ts-ignore\n            customRenderTabBar({\n              ...props,\n              ...tabBarProps,\n              isGliding,\n              preventTabPressOnGliding,\n            })\n          ) : (\n            <TabBar\n              {...props}\n              {...tabBarProps}\n              onTabPress={(event) => {\n                if (isGliding.current && preventTabPressOnGliding) {\n                  event.preventDefault();\n                }\n                // @ts-ignore\n                tabBarProps?.onTabPress && tabBarProps.onTabPress(event);\n              }}\n            />\n          )}\n        </Animated.View>\n      </View>\n    );\n  };\n\n  const [containerHeight, setContainerHeight] = React.useState<\n    number | undefined\n  >(undefined);\n\n  const onLayout = React.useCallback((e: LayoutChangeEvent) => {\n    setContainerHeight(e.nativeEvent.layout.height);\n  }, []);\n\n  const onTouchStart = React.useCallback(() => {\n    lastInteractionTime.current = Date.now();\n    isUserInteracting.current = true;\n  }, []);\n\n  const onTouchEnd = React.useCallback(() => {\n    lastInteractionTime.current = Date.now();\n    isUserInteracting.current = false;\n  }, []);\n\n  return (\n    <View\n      style={styles.container}\n      onLayout={onLayout}\n      onTouchStart={onTouchStart}\n      onTouchCancel={onTouchEnd}\n      onTouchEnd={onTouchEnd}\n    >\n      <CollapsibleContextProvider\n        value={{\n          activeRouteKey: routes[index][routeKeyProp as keyof Route] as string,\n          scrollY: scrollY.current,\n          buildGetRef,\n          headerHeight,\n          tabBarHeight,\n          appBarHeight,\n          onMomentumScrollBegin,\n          onScrollBeginDrag,\n          onScrollEndDrag,\n          onMomentumScrollEnd,\n          containerHeight: containerHeight || 0,\n        }}\n      >\n        <TabView\n          {...tabViewProps}\n          navigationState={{ index, routes }}\n          renderTabBar={renderTabBar}\n        />\n      </CollapsibleContextProvider>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  headerContainer: {\n    top: 0,\n    zIndex: 1,\n    position: 'absolute',\n    width: '100%',\n  },\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n\nexport default CollapsibleTabView;\n\nfunction calculateNewOffset(\n  offset: number,\n  headerHeight: number,\n  disableSnap: boolean,\n  snapThreshold: number\n) {\n  return offset >= 0 && offset <= headerHeight\n    ? disableSnap\n      ? offset\n      : offset <= headerHeight * snapThreshold\n      ? 0\n      : offset > headerHeight * snapThreshold\n      ? headerHeight\n      : null\n    : null;\n}\n"]}